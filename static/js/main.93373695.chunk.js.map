{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/phonebook/phonebook-actions.js","redux/phonebook/selector.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","actions","changeFilter","createAction","deleteContact","addContact","name","number","payload","id","shortid","generate","getContacts","state","items","getFilter","filter","getVisibleContacts","contacts","normalizedFilter","toLowerCase","includes","ContactList","onDeleteContact","dispatch","useDispatch","visibleContact","useSelector","className","s","list","map","listItem","btn","type","onClick","Filter","label","input","placeholder","pattern","title","value","onChange","event","target","ContactForm","useState","setName","setNumber","handleChange","form","onSubmit","e","preventDefault","required","App","createReducer","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.93373695.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__1OZPP\",\"list\":\"ContactList_list__1x3vv\",\"btn\":\"ContactList_btn__3vAiH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2IJEk\",\"input\":\"Filter_input__2f3C9\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n\r\nconst changeFilter = createAction('phonebook/change_filter');\r\nconst deleteContact = createAction('phonebook/delete');\r\nconst addContact = createAction('phonebook/add' , (name,number)=>({\r\n    payload: {id:shortid.generate(),\r\n    name,\r\n    number,},}));\r\n\r\n\r\nconst actions = { changeFilter, deleteContact, addContact };\r\nexport default actions;","export const getContacts = state => state.items;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};","\r\nimport s from './ContactList.module.css'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/phonebook/phonebook-actions'\r\nimport { getVisibleContacts } from '../../redux/phonebook/selector';\r\n\r\n\r\nexport default function ContactList({ contacts, onDeleteContact }) {\r\n  const dispatch = useDispatch();\r\n  const visibleContact = useSelector(getVisibleContacts);\r\n  return (\r\n  <ul className={s.list}>\r\n      {visibleContact.map(({id,name,number }) => (\r\n        <li className={s.listItem} key={id}>\r\n          {`${name}: ${number}`}\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => dispatch(actions.deleteContact(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n\r\n","import s from \"./Filter.module.css\";\r\nimport { getFilter,getContacts } from \"../../redux/phonebook/selector\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport actions from '../../redux/phonebook/phonebook-actions'\r\nexport default function Filter() {\r\n  const filter = useSelector(getFilter);\r\n  const contacts= useSelector(getContacts)\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      Filter\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        placeholder=\"Enter some letters to search\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        value={filter}\r\n        onChange={event => dispatch(actions.changeFilter(event.target.value))}\r\n      ></input>\r\n    </label>\r\n  );\r\n}","\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport s from './ContactForm.module.css';\r\nimport actions from '../../redux/phonebook/phonebook-actions'\r\nexport default function ContactForm() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const dispatch = useDispatch()\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(actions.addContact(name, number));\r\n        setName('');\r\n        setNumber('');\r\n        \r\n    };\r\n\r\n    return (\r\n        <form className={s.form} onSubmit={handleSubmit}>\r\n            <label>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={name}\r\n                    className={s.input} />\r\n            </label>\r\n            <label>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={number}\r\n                    className={s.input} />\r\n            </label>\r\n            <button type=\"submit\" className={s.btn}>Add contact</button>\r\n        </form>\r\n    )\r\n}\r\n// class ContactForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     }\r\n\r\n//     handleChange = e => {\r\n//         const { name, value } = e.currentTarget;\r\n//         this.setState({ [name]: value, })\r\n\r\n//     };\r\n//    handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.onSubmit(this.state);\r\n//     this.setState({ name: \"\", number: \"\" });\r\n\r\n//     };\r\n\r\n\r\n//       render() {\r\n//         return (\r\n\r\n        //         <form className = {s.form} onSubmit ={ this.handleSubmit}>\r\n        //             <label>\r\n        //                 Name\r\n        //                 <input\r\n        //                     type=\"text\"\r\n        //                     name=\"name\"\r\n        //                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        //                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        //                     required\r\n        //                     onChange={this.handleChange}\r\n        //                     value={this.state.name}\r\n        //                     className ={s.input} />\r\n        //             </label>\r\n        //               <label>\r\n        //                 Number\r\n        //                 <input\r\n        //                     type=\"tel\"\r\n        //                     name=\"number\"\r\n        //                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        //                     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        //                     required\r\n        //                     onChange={this.handleChange}\r\n        //                     value={this.state.number}\r\n        //                     className ={s.input} />\r\n        //             </label>\r\n        //              <button type=\"submit\" className={s.btn}>Add contact</button>\r\n        //         </form>\r\n\r\n\r\n        // )\r\n//     }\r\n// }\r\n// export default ContactForm","\n\n\nimport s from './App.module.css';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport ContactForm from './components/ContactForm';\n\n\n// const defaultContacts= [\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     { id: 'id-5', name: 'Alex Baran', number: '067-21-51' },\n//     ]\n\nexport default function App() {\n\n  // const [contacts, setContacts] = useState(JSON.parse(window.localStorage.getItem('contacts')) ?? defaultContacts);\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  // }, [contacts]);\n    \n  // const addContact = (name, number) => {\n  //   const duplicate = contacts.find((contact) => contact.name === name);\n  //   if (duplicate) {\n  //     alert('Такой контакт уже существует!');\n  //   } else {\n  //     const contact = {\n  //       name,\n  //       number,\n  //       id: shortid.generate(),\n  //     };\n\n  //     setContacts((prevState) => [contact, ...prevState]);\n  //   }\n  // };\n  // const getVisibleContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n  // const changeFilter = (e) => {\n  //   setFilter(e.currentTarget.value);\n  // };\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) => prevState.filter((contact) => contact.id !== contactId));\n  // };\n\n  return (\n    <>\n      <h1 className={s}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s}>Contacts</h2>\n      <Filter />\n      <ContactList/>\n    </>\n  );\n}\n\n\n\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//       { id: 'id-5', name: 'Alex Baran', number: '067-21-51' },\n//     ],\n//     filter: '',\n//   };\n\n//   addContact = ({ name, number }) => {\n//     let duplicate = this.state.contacts.find(contact => contact.name === name);\n\n//     if (duplicate) {\n//       alert('Такой контакт уже существует!');\n//     } else {\n//       const contact = {\n//         name,\n//         number,\n//         id: shortid.generate(),\n//       };\n\n//       this.setState(prevState => ({\n//         contacts: [...prevState.contacts, contact],\n//       }));\n//     }\n//   };\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parseContacts = JSON.parse(contacts);\n//     if (parseContacts) {\n//       this.setState({ contacts: parseContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log('Обновился стейт');\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n//   // onSubmitHandler = data => {\n//   //   console.log(data)\n//   // }\n\n//   render() {\n//     const { filter } = this.state;\n//     const VisibleContacts = this.getVisibleContacts();\n//     return (\n//       <>\n//         <h1 className={s}>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} />\n//         <h2 className={s}>Contacts</h2>\n//         <Filter value={filter} onChange={this.changeFilter} />\n//         <ContactList\n//           contacts={VisibleContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n\n// onSubmitData={this.onSubmitHandler}\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from './phonebook-actions';\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteContact]: (state, { payload }) => state.filter((contacts) => !contacts.id.includes(payload))\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n})\r\n","\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer, \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport phonebookReducer from './phonebook/phonebook-reducer';\r\n\r\n\r\nconst persistConfig = {\r\n    key: 'contact',\r\n    storage,\r\n    blacklist:['filter']\r\n}\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nexport const store = configureStore({\r\n  reducer: persistReducer(persistConfig, phonebookReducer),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { store, persistor } from './redux/store';\nimport {PersistGate} from 'redux-persist/es/integration/react'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n    <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1PkZt\",\"btn\":\"ContactForm_btn__F_cRW\",\"input\":\"ContactForm_input__S1dFf\"};"],"sourceRoot":""}